#将r 设置为加载配置文件，并显示"reloaded!"信息
bind r source-file ~/.tmux.conf \; display "Reloaded!"

#解除Ctrl+b 与前缀的对应关系
#设置前缀为Ctrl + w
#unbind C-b
#set -g prefix C-w
#bind-key C-w send-prefix

#up
bind-key k select-pane -U
#down
bind-key j select-pane -D
#left
bind-key h select-pane -L
#right
bind-key l select-pane -R

#for vim colorscheme
set -g default-terminal "screen-256color"

#maximize the current pane and hit again to bring it back to an even split
#bind-key | resize-pane -Z \; display-message "Zoom zoom zoom"

# split window
unbind '"'
bind v splitw -v	
#unbind %   # vertical split (prefix -)
#bind p splitw -h	# horizontal split (prefix |)

#set -g status-left "#[fg=green]s#S:w#I.p#P#[default]"



#### COLOUR (Solarized 256)
#https://github.com/seebi/tmux-colors-solarized
#
#
set -g mode-mouse on
# Enable mouse control (clickable windows, panes, resizable panes)
set -g mouse-select-window on
set -g mouse-select-pane on
set -g mouse-resize-pane on

# default statusbar colors
set-option -g status-bg colour235 #base02
set-option -g status-fg colour136 #yellow
set-option -g status-attr default

# default window title colors
set-window-option -g window-status-fg colour244 #base0
set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg colour166 #orange
set-window-option -g window-status-current-bg default
#set-window-option -g window-status-current-attr bright

# pane border
set-option -g pane-border-fg colour235 #base02
set-option -g pane-active-border-fg colour240 #base01

# message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange

# clock
set-window-option -g clock-mode-colour colour64 #green

#vim mode
setw -g mode-keys vi

#copy like vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

#tmux-powerline  https://github.com/erikw/tmux-powerline
#set-option -g status on
#set-option -g status-interval 2
#set-option -g status-utf8 on
#set-option -g status-justify "centre"
#set-option -g status-left-length 60
#set-option -g status-right-length 90
#set-option -g status-left "#(~/tools/tmux-powerline/powerline.sh left)"
#set-option -g status-right "#(~/tools/tmux-powerline/powerline.sh right)"
#
#
#set-window-option -g window-status-current-format “#[fg=colour235, bg=colour27]#[fg=colour255, bg=colour27] #I #W #[fg=colour27, bg=colour235]”

set-window-option -g automatic-rename off
set-option -g allow-rename off




# for v1.6
bind + run 'cut -c3- ~/.tmux.conf | sh -s maximize_pane'

maximize_pane() {
   tmux -q -L swap-pane-test -f /dev/null new-session -d \; new-window \; new-window \; swap-pane -t :1 \; kill-session || { tmux display 'your tmux version has a buggy swap-pane command - see ticket #108, fixed in upstream commit 78e783e'; exit; }
   __current_pane=$(tmux display -p '#{pane_id}')

   __dead_panes=$(tmux list-panes -s -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
   __restore=$(echo "${__dead_panes}" | sed -n -E -e "s/^1 ${__current_pane} .+maximized.+(%[0-9]+)$/tmux swap-pane -s \1 -t ${__current_pane} \; kill-pane -t ${__current_pane}/p" -e "s/^1 (%[0-9]+) .+maximized.+${__current_pane}$/tmux swap-pane -s \1 -t ${__current_pane} \; kill-pane -t \1/p" )

   if [ x"${__restore}" = x ] ; then
     [ x"$(tmux list-panes | wc -l | sed 's/^ *//g')" = x1 ] && tmux display "Can't maximize with only one pane" && return
     __window=$(tmux new-window -P "exec maximized...& tmux setw remain-on-exit on; clear; tmux clear-history; printf 'Pane has been maximized, press <prefix>+ to restore. %s' \\${__current_pane};")
     __window=${__window%.*}

     __guard=50
     while ( [ x"$(tmux list-panes -t ${__window} -F '#{session_name}:#{window_index} #{pane_dead}')" != x"${__window} "1 ] && [ x"${__guard}" != x0 ] ) ; do sleep 0.01 ; __guard=$((__guard - 1)); done
     if [ x"${__guard}" = 0 ] ; then
       exit 1
     fi

     __new_pane=$(tmux display -p '#{pane_id}')
     tmux setw remain-on-exit off \; swap-pane -s "${__current_pane}" -t "${__new_pane}"
   else
     ${__restore} || tmux kill-pane
   fi
 }
